[build-system]
requires = ["setuptools >= 64", "setuptools_scm >= 8"]
build-backend = "setuptools.build_meta"

[project]
name = "src"
description = "Package for storing reusable functions and classes during experimentations."
authors = [
  { name = "Guillem Hurault" },
]
readme = "README.md"
license = { file = "LICENSE" }
classifiers = [
  "Programming Language :: Python :: 3",
]
dependencies = [
  "matplotlib",
]
requires-python = ">=3.9"
dynamic = ["version"]

[project.optional-dependencies]
# Additional dependencies
analysis = [
  "matplotlib",
  "numpy",
  "pandas",
]
dev = [
  "ipykernel",
  "ipywidgets",
  "pdoc",
  "pre-commit",
  "pytest",
  "pytest-cov",
  "sqlfluff",
  "uv",
]
all = [
  "src[analysis]",
  "src[dev]",
]

[project.urls]
# Homepage = ""
# Documentation = ""
# Repository = ""
# Issues = ""

[tool.setuptools_scm]

[tool.mypy]
ignore_missing_imports = true

[tool.ruff.lint]
select = [
  "A", # builtins
  "B", # flake8-bugbear
  "C4", # comprehensions
  "C90", # McCabe cyclomatic complexity
  "D", # pydocstyle
  # "DOC", # pydoclint # TODO add when no longer in preview
  "E", # pycodestyle error
  # TODO "EM", # error messages
  "F", # pyflakes
  "FURB", # modernising Python codebase
  "I", # isort
  "ICN", # import conventions
  "N", # PEP8 naming
  "NPY", # numpy
  "PD", # pandas
  "PERF", # performance
  "PGH004", # Use specific rules in noqa
  "PIE790", # Unnecessary placeholders
  "PLC", # pylint convention
  "PLE", # pylint error
  "PLR", # pylint refactoring
  "PLW", # pylint warning
  "RUF", # ruff specific rules
  "S", # bandit (security issues)
  "SIM", # flake8-simplify
  "TID", # Tidy imports
  "TRY300", # Use else block in try-except
  "UP", # pyupgrade
  "W", # pycodestyle warning
]
ignore = [
  "D102", # Missing docstring in public method
  "D103", # Missing docstring in public function
  "D107", # Missing docstring in __init__
  "D202", # Blank line after function docstring
  "E501", # Avoid enforcing line-length violations
  "PD015", # Use pd.merge
  "PERF203", # Try-except in loop
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402"] # Ignore import violations
"analysis/*" = [
  "B018", # Useless expression
  "B028", # No explicit stacklevel for warnings
  "D101", # Missing docstring in public class
  "F403", # Use of wildcard imports
  "F405", # Undefined names because of wildcard imports
  "PLR2004", # Magic values
  "S", # Disable bandit on analysis files
]
"tests/*" = [
  "D100", # Undocumented public module
  "D101", # Missing docstring in public class
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = [
  "src",
] # Add others local/private packages
# Not distinguishing first_party and local_folder following PEP8 and also for
# consistency as src is used outside the package
# required-imports = ["from src import config"]

[tool.pytest.ini_options]
testpaths = ["src", "tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--doctest-modules"
doctest_optionflags = "NORMALIZE_WHITESPACE ELLIPSIS"
